<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Real-time Object Detection with Webcam</title>
        <style>
            html,
            body {
                font-family: Arial, Helvetica, sans-serif;
                margin: 0;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: flex-start;
                min-height: 100vh;
                background-color: #f0f0f0;
            }
            .container {
                margin: 40px auto;
                width: max(50vw, 400px);
                display: flex;
                flex-direction: column;
                align-items: center;
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }
            #video-container {
                position: relative;
                width: 100%;
                max-width: 640px;
                height: auto;
                margin-bottom: 20px;
                background-color: black;
                border-radius: 4px;
                overflow: hidden;
            }
            #webcam-video,
            #detection-canvas {
                width: 100%;
                height: auto;
                display: block;
            }
            #detection-canvas {
                position: absolute;
                top: 0;
                left: 0;
            }
            button {
                background-color: #4caf50;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
                margin-bottom: 20px;
            }
            button:hover {
                background-color: #45a049;
            }
            button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }
            #status {
                margin-top: 10px;
                font-weight: bold;
                color: #333;
            }
            .bounding-box {
                position: absolute;
                box-sizing: border-box;
                border-width: 2px;
                border-style: solid;
            }
            .bounding-box-label {
                color: white;
                position: absolute;
                font-size: 12px;
                margin-top: -16px;
                margin-left: -2px;
                padding: 1px 4px;
                border-radius: 2px;
                white-space: nowrap;
            }
            #results-container {
                width: 100%;
                text-align: left;
                margin-top: 20px;
            }
            #detected-objects-list {
                list-style-type: none;
                padding: 0;
            }
            #detected-objects-list li {
                padding: 5px 0;
                border-bottom: 1px solid #eee;
            }
        </style>
    </head>
    <body>
        <main class="container">
            <h1>Real-time Object Detection</h1>
            <div id="video-container">
                <video id="webcam-video" autoplay playsinline muted></video>
                <canvas id="detection-canvas"></canvas>
            </div>
            <button id="start-webcam">Start Webcam</button>
            <p id="status">Loading model... Please wait.</p>
            <div id="results-container">
                <h2>Detected Objects</h2>
                <ul id="detected-objects-list"></ul>
            </div>
        </main>

        <script type="module">
            const worker = new Worker("worker.js", { type: "module" });

            const video = document.getElementById("webcam-video");
            const canvas = document.getElementById("detection-canvas");
            const context = canvas.getContext("2d");
            const startWebcamButton = document.getElementById("start-webcam");
            const statusElement = document.getElementById("status");
            const videoContainer = document.getElementById("video-container");
            const detectedObjectsList = document.getElementById("detected-objects-list");

            let animationFrameId = null;

            startWebcamButton.disabled = true;

            worker.onmessage = (event) => {
                const { type, results, message } = event.data;

                if (type === "ready") {
                    statusElement.textContent = "Model loaded. Ready to detect!";
                    startWebcamButton.disabled = false;
                } else if (type === "results") {
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);

                    detectedObjectsList.innerHTML = "";
                    results.forEach((detection) => {
                        renderBox(detection);
                        const listItem = document.createElement("li");
                        const score = (detection.score * 100).toFixed(2);
                        listItem.textContent = `${detection.label} - ${score}% Confidence`;
                        detectedObjectsList.appendChild(listItem);
                    });

                    // This is the key change: call detectFrame to send the next image to the worker
                    detectFrame();
                } else if (type === "error") {
                    statusElement.textContent = `Error: ${message}`;
                    console.error("Worker Error:", message);
                }
            };

            async function startWebcam() {
                statusElement.textContent = "Requesting webcam access...";
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    video.srcObject = stream;

                    video.onloadedmetadata = () => {
                        canvas.width = video.videoWidth;
                        canvas.height = video.videoHeight;
                        videoContainer.style.width = `${video.videoWidth}px`;
                        videoContainer.style.height = `${video.videoHeight}px`;

                        startWebcamButton.textContent = "Stop Webcam";
                        startWebcamButton.onclick = stopWebcam;
                        statusElement.textContent = "Webcam started. Detecting objects...";

                        // Send the first frame to the worker to kick off the detection loop
                        detectFrame();
                    };
                } catch (error) {
                    statusElement.textContent = `Error accessing webcam: ${error.message}`;
                    console.error("Error accessing webcam:", error);
                }
            }

            function stopWebcam() {
                if (video.srcObject) {
                    const stream = video.srcObject;
                    stream.getTracks().forEach((track) => track.stop());
                    video.srcObject = null;
                }
                if (animationFrameId) {
                    cancelAnimationFrame(animationFrameId);
                    animationFrameId = null;
                }
                context.clearRect(0, 0, canvas.width, canvas.height);
                detectedObjectsList.innerHTML = "";
                statusElement.textContent = "Webcam stopped. Click 'Start Webcam' to restart.";
                startWebcamButton.textContent = "Start Webcam";
                startWebcamButton.onclick = startWebcam;
            }

            function detectFrame() {
                if (video.paused || video.ended) {
                    stopWebcam();
                    return;
                }

                // Create an ImageBitmap from the video frame
                createImageBitmap(video)
                    .then((imageBitmap) => {
                        // Send the image data to the worker with the correct protocol
                        worker.postMessage({ type: "detect", imageBitmap }, [imageBitmap]);
                    })
                    .catch((error) => {
                        console.error("Error creating ImageBitmap:", error);
                    });
            }

            function renderBox({ box, label }) {
                const { xmax, xmin, ymax, ymin } = box;
                const color =
                    "#" +
                    Math.floor(Math.random() * 0xffffff)
                        .toString(16)
                        .padStart(6, 0);
                const x1 = xmin * canvas.width;
                const y1 = ymin * canvas.height;
                const width = (xmax - xmin) * canvas.width;
                const height = (ymax - ymin) * canvas.height;

                context.strokeStyle = color;
                context.lineWidth = 2;
                context.strokeRect(x1, y1, width, height);
                context.fillStyle = color;
                context.font = "12px Arial";
                const textWidth = context.measureText(label).width;
                context.fillRect(x1, y1 - 18, textWidth + 8, 18);
                context.fillStyle = "white";
                context.fillText(label, x1 + 4, y1 - 5);
            }

            startWebcamButton.onclick = startWebcam;
        </script>
    </body>
</html>
